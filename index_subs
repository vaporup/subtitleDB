#!/usr/bin/env python

import os
import sys
import yaml

from whoosh.index import create_in
from whoosh.fields import *

toolbar_width = 10

percent_10  = True
percent_20  = True
percent_30  = True
percent_40  = True
percent_50  = True
percent_60  = True
percent_70  = True
percent_80  = True
percent_90  = True
percent_100 = True

uuid_prefix_foldernames = os.listdir("subtitles")

alle = len(uuid_prefix_foldernames)
count = float(alle)

#
# Setup progressbar
#

sys.stdout.write("\nIndexing subtitles ")
sys.stdout.write("[%s]" % (" " * toolbar_width))
sys.stdout.flush()
sys.stdout.write("\b" * (toolbar_width+1)) # return to start of line, after '['

#
# woosh index schema
#

schema_by_hash_filesize = Schema(

    id       = STORED,
    year     = ID(stored=True),
    lang     = ID(stored=True),
    title    = STORED,
    hash     = ID(stored=True),
    filesize = ID(stored=True)
)

schema_by_movie = Schema(

    id         = STORED,
    year       = ID(stored=True),
    lang       = ID(stored=True),
    title      = TEXT(stored=True),
    title_orig = TEXT(stored=True),
    imdb_id    = ID(stored=True),
    num_subs   = ID(stored=True)
)

if not os.path.exists("index"):
    os.mkdir("index")

ix_by_hash_filesize = create_in("index", schema_by_hash_filesize, indexname="by_hash_filesize")
ix_by_movie         = create_in("index", schema_by_movie, indexname="by_movie")

writer_by_hash_filesize = ix_by_hash_filesize.writer()
writer_by_movie         = ix_by_movie.writer()

#
# Iterate over all subtitles
#

for uuid_prefix_foldername in uuid_prefix_foldernames:

    if uuid_prefix_foldername == "template":
      continue

    uuid_prefix_folder = os.path.join("subtitles", uuid_prefix_foldername)

    if os.path.isdir(uuid_prefix_folder):

      uuid_foldernames = os.listdir(uuid_prefix_folder)

      for uuid_foldername in uuid_foldernames:

        subtitle_folder = os.path.join(uuid_prefix_foldername, uuid_foldername)

        uuid_folder = os.path.join(uuid_prefix_folder, uuid_foldername)

        if os.path.isdir(uuid_folder):

          meta_data_file = os.path.join(uuid_folder, "meta.yml")
          meta_data      = open(meta_data_file).read()
          subtitle_info  = yaml.load(meta_data)

          if subtitle_info.has_key("year"):
            year = subtitle_info['year']
          else:
            year = ""

          if subtitle_info.has_key("original_title"):
            title_orig = subtitle_info['original_title']
          else:
            title_orig = ""

          if subtitle_info.has_key("imdb_id"):
            imdb_id = subtitle_info['imdb_id']
          else:
            imdb_id = ""

          subtitle_dirs = [name for name in os.listdir(uuid_folder) if os.path.isdir( uuid_folder + "/" + name)]

          num_subs = len(subtitle_dirs)

          writer_by_movie.add_document(
                                    title       = unicode(subtitle_info['title']),
                                    title_orig  = unicode(title_orig),
                                    imdb_id     = unicode(imdb_id),
                                    year        = unicode(year),
                                    num_subs    = unicode(num_subs),
                                    id          = unicode(subtitle_folder)
                                   )

          for subtitle_dir in subtitle_dirs:

            subtitle_meta_data_file = os.path.join(uuid_folder, subtitle_dir, "subtitle.yml")
            subtitle_meta_data      = open(subtitle_meta_data_file).read()
            subtitle_data           = yaml.load(subtitle_meta_data)

            subtitle_id = os.path.join(subtitle_folder, subtitle_dir)

            if "matches" in subtitle_data:

              for match in subtitle_data["matches"]:

                writer_by_hash_filesize.add_document(
                                    id       = unicode(subtitle_id),
                                    lang     = unicode(subtitle_data['language']),
                                    hash     = unicode(match['hash']),
                                    filesize = unicode(match['filesize']),
                                    title    = unicode(subtitle_info['title']),
                                    year     = unicode(year)
                                   )

    count = count -1
    percent = 100 - count / alle * 100

    if percent > 10:
      if percent_10:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_10 = False
    if percent > 20:
      if percent_20:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_20 = False
    if percent > 30:
      if percent_30:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_30 = False
    if percent > 40:
      if percent_40:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_40 = False
    if percent > 50:
      if percent_50:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_50 = False
    if percent > 60:
      if percent_60:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_60 = False
    if percent > 70:
      if percent_70:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_70 = False
    if percent > 80:
      if percent_80:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_80 = False
    if percent > 90:
      if percent_90:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_90 = False
    if percent > 95:
      if percent_100:
        sys.stdout.write(".")
        sys.stdout.flush()
        percent_100 = False

sys.stdout.write("\n")
sys.stdout.write("\n")

writer_by_hash_filesize.commit()
writer_by_movie.commit()
